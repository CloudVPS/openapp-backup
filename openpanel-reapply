#!/usr/bin/python

from OpenPanel.coreclient import CoreSession
import json, sys, collections

def c3_linearize_keyfunc(k):
    tree = []
    stack = collections.deque([k])
    while stack:
        c = stack.popleft()
        tree.append(c)
        for dep in reqs[c]:
            stack.append(dep)
    result = []
    seen = set()
    for c in reversed(tree):
        if c in seen:
            continue
        seen.add(c)
        result.append(c)
    return result

c = CoreSession()
c.login()

world = c.rpc.getworld()
classes = world['body']['data']['body']['classes']
reqs = dict()
for k,v in classes.iteritems():
    reqs[k]=[]
    if 'info' in v:
        if 'parent' in v['info']:
            reqs[k] = [v['info']['parent']['id']]

classorder = sorted(reqs, key=c3_linearize_keyfunc)
objects = list()
objectkeys = set()
for cname in classorder:
    if not classes[cname]['capabilities']['update']:
        continue
    data = c.rpc.getrecords(classid=cname)['body']['data']
    for classname, objs in data.iteritems():
        if classname in ('info','OpenCORE:Quota', ''):
            continue
        for obj in objs.values():
            if not obj['uuid'] in objectkeys:
                objects.append(obj)
                objectkeys.add(obj['uuid'])

    #objs = c.rpc.getrecords(classid=cname)['body']['data'].get(cname,[])
    #print objs

for obj in objects:
    for k in obj.keys():
        if obj[k] == '':
            del obj[k]
    try: 
        c.updateobject(classid=obj['class'], objectid=obj['uuid'], body=obj)
    except Exception as e:
        print "object %s/%s failed: %s" % (obj['class'], obj.get('metaid', obj['uuid']), e)
