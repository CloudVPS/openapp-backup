#!/bin/bash

###
# This script will look for scripts to run to restore a system based on the
# backup-file created by openapp-backup.
###

. /usr/lib/openapp-backup/includes/index

[ -z $1 ] && fatal "You should enter an argument, the file you want to restore from"
[ -f ${1} ] || fatal "Cannot find the file you want me to use to restore"

[ `id -u` -gt 0 ]  && fatal "This script must be run as root"

function show_help() {
	echo "openapp-restore filename"
	echo ""
	echo "filename : The openapp-backup archive you want to restore"
	echo ""
	exit 1;
}

BACKUPDIR=$(mktemp -d)
BASEMODULES=/usr/lib/openapp-backup/modules
MODULEDIR=/etc/openapp-backup/scripts.d
WARNINGS=0
FATALS=0

###
# Extract the tar-file in the tempdir
cd ${BACKUPDIR}
tar --numeric-owner -zxf ${1}

###
# Make sure we run these first
MODULES="dpkg-selections"
for SCRIPT in $MODULES; do
	echo "Running dpkg-selections"
	OUTPUT=$(${BASEMODULES}/${SCRIPT} ${BACKUPDIR}/${SCRIPT} restore 2> /dev/null)
	[ -z "${OUTPUT}" ] || warning "${SCRIPT}: $OUTPUT"
done

###
# Now look for specific modules to restore from
MODULES=$(grep -H '^# Prio' "${MODULEDIR}"/* 2>/dev/null | sort -k 3 -n | cut -f 1 -d :)
for SCRIPT in $MODULES; do
	SCRIPTNAME=$(basename ${SCRIPT})
	echo "Trying to run ${SCRIPTNAME}..."
	###
	# Don't run this script if the backup doesn't contain a dir for it.
	[ -d ${BACKUPDIR}/${SCRIPTNAME} ] || continue

	OUTPUT=$(${SCRIPT} ${BACKUPDIR}/${SCRIPTNAME} restore 2> /dev/null)

	[ -z "${OUTPUT}" ] || warning "${SCRIPT}: $OUTPUT"
done

rm -rf ${BACKUPDIR}

if [ $WARNINGS -eq 0 -a $FATALS -eq 0 ]; then
	echo "All went well"
else
	echo "There where $FATALS fatal errors and $WARNINGS warnings"
	exit 1
fi

